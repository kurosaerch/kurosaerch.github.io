import{W as d,X as w,Y as u,Z as b}from"./scheduler.6c5d9662.js";import{g as x,t as _,c as v,a as A}from"./index.8c724fb2.js";function L(t,e){const s=e.token={};function r(a,n,l,i){if(e.token!==s)return;e.resolved=i;let o=e.ctx;l!==void 0&&(o=o.slice(),o[l]=i);const c=a&&(e.current=a)(o);let h=!1;e.block&&(e.blocks?e.blocks.forEach((p,g)=>{g!==n&&p&&(x(),_(p,1,1,()=>{e.blocks[g]===p&&(e.blocks[g]=null)}),v())}):e.block.d(1),c.c(),A(c,1),c.m(e.mount(),e.anchor),h=!0),e.block=c,e.blocks&&(e.blocks[n]=c),h&&b()}if(d(t)){const a=w();if(t.then(n=>{u(a),r(e.then,1,e.value,n),u(null)},n=>{if(u(a),r(e.catch,2,e.error,n),u(null),!e.hasCatch)throw n}),e.current!==e.pending)return r(e.pending,0),!0}else{if(e.current!==e.then)return r(e.then,1,e.value,t),!0;e.resolved=t}}function R(t,e,s){const r=e.slice(),{resolved:a}=t;t.current===t.then&&(r[t.value]=a),t.current===t.catch&&(r[t.error]=a),t.block.p(r,s)}const m=t=>t.replaceAll("&#034;",'"').replaceAll("&#038;","&").replaceAll("&#039;","'").replaceAll("&eacute;","Ã©"),k=t=>{try{return new URL(t),!0}catch{return!1}},y=(t,e)=>{if(!k(t))throw new TypeError("Invalid URL passed to fetchAbortPrevious");if(!E(e))throw new TypeError("Invalid AbortController passed to fetchAbortPrevious");return e&&e.abort(),e=new AbortController,fetch(t,{signal:e.signal})},E=t=>t===null||t instanceof AbortController;let I=null;const C=async t=>{const e=new URL("https://api.rule34.xxx/autocomplete.php");e.searchParams.append("q",t.replaceAll(" ","_"));const s=await y(e.toString(),I);if(s.ok){const r=await s.json();if(Array.isArray(r)){if(r.length===0)throw new Error("No tags found");return r.map(N)}else throw r.message?new Error(r.message):new Error("Invalid tag suggestions received")}else throw new Error("Failed to get tag suggestions")},F=async t=>{const e=new URL("https://api.rule34.xxx/index.php?page=dapi&s=tag&q=index&limit=1");e.searchParams.append("name",t);const r=await(await fetch(e.toString())).text(),l=new DOMParser().parseFromString(r,"text/xml").getElementsByTagName("tag")[0];return f(l.attributes)},N=t=>({label:m(t.value),count:T(t.label),type:"tag"}),T=t=>Number(t.substring(t.lastIndexOf("(")+1,t.length-1)),f=t=>{const e=t.getNamedItem("name"),s=t.getNamedItem("count"),r=t.getNamedItem("type");if(e===null||s===null||r===null)throw new Error(`Failed to parse tag details, attribute was null. ${e}, ${s}, ${r}`);return{name:m(e.value),count:Number(s.value),type:P(r.value)}},P=t=>["general","artist","general","copyright","character","metadata"][Number(t)];export{F as a,y as f,C as g,L as h,k as i,m as r,R as u};
